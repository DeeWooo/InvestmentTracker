# InvestmentTracker

投资记录工具单机版

## 项目简介

这是一个基于 Tauri+Next.js 开发的投资记录工具,用于追踪个人投资组合表现。



# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

# Scratchpad

## Task Analysis
需要完善投资工具的功能，参考 http://47.92.128.218:1111/portfolio 实现投资组合的展示。

## Current Status
- 基础框架：Tauri + Next.js
- 已实现功能：
  [X] 持仓数据的实时盈亏列表
- 待实现功能：
  [ ] 投资组合维度的实时盈亏展示

## Data Model Analysis
1. 投资组合结构
   - 组合名称：主观持仓、非RMB、RMBETF、北上资金、豆瓜、peg策略、白马成长策略
   - 组合统计数据：
     - 总持仓成本
     - 单标满仓金额
     - 总盈亏
     - 总盈亏比

2. 持仓数据结构
   - 证券基本信息：代码、名称
   - 当前数据：
     - 当前价格
     - 当前仓位
     - 成本仓位
   - 盈亏数据：
     - 盈亏金额
     - 盈亏比例
   - 建议区间：
     - 买入区间
     - 卖出区间
   - 交易记录：
     - 买入日期
     - 买入价格
     - 数量
     - 盈亏
     - 盈亏比

## Technical Planning
1. 数据结构实现
   [ ] Portfolio 模型定义
   [ ] Position 模型定义
   [ ] Transaction 模型定义

2. 功能实现
   [ ] 组合列表展示
   [ ] 组合详情页面
   [ ] 持仓明细展示
   [ ] 交易记录展示
   [ ] 实时盈亏计算

3. UI组件开发
   [ ] 组合选择器
   [ ] 组合统计卡片
   [ ] 持仓列表表格
   [ ] 交易记录表格
   [ ] 建议区间展示

## Next Steps
[X] 分析参考页面的数据结构
[ ] 设计数据库模型
[ ] 开发基础UI组件